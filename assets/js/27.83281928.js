(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{201:function(e,t,i){"use strict";i.r(t);var s=i(0),a=Object(s.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"_29-divide-two-integers"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_29-divide-two-integers","aria-hidden":"true"}},[e._v("#")]),e._v(" 29. Divide Two Integers")]),e._v(" "),i("h4",{attrs:{id:"题目描述"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#题目描述","aria-hidden":"true"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),i("p",[e._v("Given two integers "),i("code",[e._v("dividend")]),e._v(" and "),i("code",[e._v("divisor")]),e._v(", divide two integers without using multiplication, division and mod operator.")]),e._v(" "),i("p",[e._v("Return the quotient after dividing "),i("code",[e._v("dividend")]),e._v(" by "),i("code",[e._v("divisor")]),e._v(".")]),e._v(" "),i("p",[e._v("The integer division should truncate toward zero.")]),e._v(" "),i("p",[i("strong",[e._v("Example 1:")])]),e._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("Input: dividend = 10, divisor = 3\nOutput: 3\n")])]),e._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[e._v("1")]),i("br"),i("span",{staticClass:"line-number"},[e._v("2")]),i("br")])]),i("p",[i("strong",[e._v("Example 2:")])]),e._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("Input: dividend = 7, divisor = -3\nOutput: -2\n")])]),e._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[e._v("1")]),i("br"),i("span",{staticClass:"line-number"},[e._v("2")]),i("br")])]),i("p",[i("strong",[e._v("Note:")])]),e._v(" "),i("ul",[i("li",[e._v("Both dividend and divisor will be 32-bit signed integers.")]),e._v(" "),i("li",[e._v("The divisor will never be 0.")]),e._v(" "),i("li",[e._v("Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 2^31 − 1 when the division result overflows.")])]),e._v(" "),i("h4",{attrs:{id:"解题思路"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#解题思路","aria-hidden":"true"}},[e._v("#")]),e._v(" 解题思路")]),e._v(" "),i("h4",{attrs:{id:"解题代码-javascript"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#解题代码-javascript","aria-hidden":"true"}},[e._v("#")]),e._v(" 解题代码(javascript)")]),e._v(" "),i("h4",{attrs:{id:"优化思路"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#优化思路","aria-hidden":"true"}},[e._v("#")]),e._v(" 优化思路")])])},[],!1,null,null,null);t.default=a.exports}}]);